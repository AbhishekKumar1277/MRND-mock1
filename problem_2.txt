problem_notes = '''
Return the n most frequently occurring chars and their respective counts
e.g cccaaaaabbbb, 2 should return [(a 5) (b 4)]
in case of a tie, return char which comes earlier in alphabet ordering (capitals before smalls)
e.g. cdbba,2 -> [(b,2) (a,1)]
use standard types and and builtin functions we have used in the course.

constraints:
1. raise TypeError if word is not a str or n is not an int
2. raise ValueError if n <= 0,
3. if n > number of unique chars return the available chars and 
   their counts (sorted by above criteria)
4. The function should be case sensitive (ie) A and a are different. 
   So aaAABBB, 2 should return [(B,3), (A,2)]
'''

import operator
def most_frequent(word, n):
    pass
    if type(word).__name__ !='str' or type(n).__name__!='int':
        raise TypeError
    elif n<=0:
        raise ValueError
    else:   
        li1=list(word)
        dist_val=set(li1)
        li2=list(dist_val)
        li3={}
        for i in range(0,len(li2)):
            li3[li2[i]]=li1.count(li2[i])
        sorted_x = list(sorted(li3.items(), key=operator.itemgetter(1)))
        final=[]
        while(len(sorted_x)>0):
            i=len(sorted_x)-1
            if i-1 >= 0 and sorted_x[i][1]!=sorted_x[i-1][1]:
                final.append(sorted_x[i])
                sorted_x.pop(i)
            else:
                if len(sorted_x) > 1 and ord(sorted_x[i][0]) < ord(sorted_x[i-1][0]):
                    final.append(sorted_x[i])
                    sorted_x.pop(i)
                elif len(sorted_x) > 1 and ord(sorted_x[i][0]) > ord(sorted_x[i-1][0]):
                    final.append(sorted_x[i-1])
                    sorted_x.pop(i-1)   
                else:
                    final.append(sorted_x[i])
                    sorted_x.pop(i)
        return(final[0:n])   

def test_most_frequent():
    assert [('a',5),('b',4)] == most_frequent("aaaaabbbbcccdde", 2)
    assert [('B', 3), ('A', 2), ('a', 2)]==most_frequent("aaAABBB", 3)
    a=most_frequent("hellohello",4)
    print(a)
    assert [('x', 5), ('b', 2), ('a', 1)] == most_frequent('cbbaxxxxx',3)
test_most_frequent()
    
