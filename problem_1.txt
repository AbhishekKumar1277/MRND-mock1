
problem_notes ='''
Write a routine to sort the given list of numbers according to the number
of prime factors it has.

Constraints:
1. 1 and 0 are considered to have 0 factors
2. For negative numbers, the factor count of the corresponding
   positive numbers is considered for sorting
3. Numbers with more factors come before numbers with fewer factors
4. In case of a tie, bigger numbers (numerically) comes first
5. Return a new sorted list of numbers (not-inplace)
6. Refer to the testcase for an example.

Notes:
1. Use the python built in sorting functionality to get this done.
2. Write additional helper routines as required.
3. Assume that input is valid list of numbers.
'''
import math
import operator
def sort_by_factor_count(numbers):
    pass
    # main_li will hold the dict type :-{number: total count of its factor}
    main_li={}

    for i in range(0,len(numbers)):
        if numbers[i] < 0:
            value=abs(numbers[i])
            li=calculate_fact(value)
            main_li[numbers[i]]=len(li)
        else:
            value=numbers[i]    
            li=calculate_fact(value)
            main_li[numbers[i]]=len(li)       
    sorted_x = list(sorted(main_li.items(), key=operator.itemgetter(1)))

    final=[]
    while(len(sorted_x)>0):
        i=len(sorted_x)-1
        if i-1 >= 0 and sorted_x[i][1]!=sorted_x[i-1][1]:
            final.append(sorted_x[i][0])
            sorted_x.pop(i)
        else:
            if len(sorted_x) > 1 and sorted_x[i][0] > sorted_x[i-1][0]:
                final.append(sorted_x[i][0])
                sorted_x.pop(i)
            elif len(sorted_x) > 1 and sorted_x[i][0] < sorted_x[i-1][0]:
                final.append(sorted_x[i-1][0])
                sorted_x.pop(i-1)   
            else:
                final.append(sorted_x[i][0])
                sorted_x.pop(i)
    return(final)   
 #function for calculating factor of n 
def calculate_fact(n):
    factors=[]
    if n==0 or n==1:
        return factors 
    else:       
        while n % 2 == 0:
            factors.append(2)
            n = n / 2
        for i in range(3,int(math.sqrt(n))+1,2):
            while n % i== 0:
                factors.append(i),
                n = n / i
        if n > 2:
            factors.append(n)       
        return(list(set(factors)))

# one basic test given, write more exhaustive tests
def test_sort_by_factor_count():
    # 10 has 2 factors [2,5] , 6 has 2 [2,3], 8 has 1 [2] and 2 has 1 [2], hence the result
    assert [10, 6, 8, 2] == sort_by_factor_count([2, 8, 6, 10])
    assert [20, -6, 8, 2, -2, 1]==sort_by_factor_count([2, 8, 1, -6, -2, 20])